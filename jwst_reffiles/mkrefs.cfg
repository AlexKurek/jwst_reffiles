instrument: NIRCam
#reflabels: [bad_pixel_mask,gain_armin,bpm,rdnoise_nircam]
reflabels: [dark]
reftypes: [dark,rdnoise,gain,linearity]

default_reflabels:
   bpm: bad_pixel_mask
   rdnoise: rdnoise_nircam
   gain: gain_armin
   dark: dark

inputfiles:
   dark_pattern: Bias|Dark|BIAS|DARK|ZERO
   flat_pattern: GAIN|LIN

   #basenamepattern: (.*NRC.*\d{4}\-\d{2}\-\d{2}T\d+h\d+m\d+)
   basenamepattern: (.*)\_uncal\.fits$

   # specificy the fits keywords to determine MJD time of
   # observation. They are automatically added to the list of required
   # fits keywords. if MJD-OBS does not exist, then DATE-OBS (and
   # TIME-OBS if specified) are used to determine the MJD.
   dateobs_fitskey: DATE-END
   timeobs_fitskey: TIME-END
   mjdobs_fitskey:

   requiredfitskeys: [INSTRUME,DETECTOR,NGROUPS,NINTS,TGROUP,SUBARRAY]
   optionalfitskeys: [FILTER,PUPIL]

DD:
   max_Delta_MJD: 2.0
FF:
   max_Delta_MJD: 2.0
DDFF:
   max_Delta_MJD: 10.0


# reference file output basename: outrootdir[/outsubdir][/runID]/reflabel/reflabel[_outsubdir][_runID][.addsuffix].cmdID.reftype.fits
# if runID=AUTO, then the latest runID in the output dir outrootdir[/outsubdir] is taken
output:
   outrootdir: $JWST_MKREFS_OUTDIR
   outsubdir: test1
   runID: AUTO
   # how many leading zeros in runID
   runIDNdigits: 3
   addsuffix: bla

   # directory in which ssb products are saved.
   # if not specified, default is outrootdir[/outsubdir][/runID]/ssb
   # if skip_runID_ssbdir, then the runID is skipped
   ssbdir:
   skip_runID_ssbdir: True
   # If ssblogFlag=True, the stdout from the strun command is saved in a log
   # file, same name as reduced filename, but with suffix log.txt

   ssblogFlag: True
   # If ssberrorlogFlag=True, the stderr from the strun command is
   # saved in a log file, same name as reduced filename, but with
   # suffix err.txt
   ssberrorlogFlag: True

   # If reflogFlag=True, the stdout from the command that creates the
   # reference file is saved in a log,
   # same name as reference filename, but with suffix log.txt
   reflogFlag: True
   # If referrorlogFlag=True, the stderr from the that creates the
   # reference file is saved in a log,
   # same name as reference filename, but with suffix err.txt
   referrorlogFlag: True


   # directories in which ssb products are looked for. comma-separated list!
   pipeline_prod_search_dir:

batch:
   batch_enabled: False
   batchmode: Condor

test1: 4
test2: 5

# values allowed: CRDS, SELF, filepattern
reffile4ssb:
   gain: CRDS
   bpm: CRDS
   rdnoise: CRDS
   dark: CRDS

# after a reference file is created, run the following tests:
# (1) load it into the appropriate data model
# (2) run it through ssb
test4datamodel: False
test4ssb: True

# values allowed: CRDS, filename
validation:
   gainreffile: CRDS
   bpmreffile: CRDS
   darkreffile: CRDS

dark:
    reftype: dark
    imtypes: D+
    ssbsteps: dq_init, saturation, superbias, refpix, linearity, jump
    max_equivalent_groups: 60
    sigma_threshold: 3
    contribution_file: 'good_signals_per_group.pdf'
    pedigree: 'GROUND'
    use_after: '2037-09-30'
    author: 'I. C. Nothing'
    descrip: 'New dark current file made using mkrefs'
    history: 'This is a long history entry. At the moment, mkrefs is not smart enough to look for multi-line strings, which means this is going to have to be a single long string, which will be split and placed into the HISTORY keyword of the reference file, along with the list of input files used to create the reference file.'

bad_pixel_mask:
    reftype: bpm
    imtypes: F+
#    ssbsteps: rate-
    ssbsteps: refpix-
    dead_search: True
    low_qe_and_open_search: True
    dead_search_type: 'zero_signal'
    sigma_threshold: 3
    smoothing_box_width: 15
    dead_sigma_threshold: 5.
    dead_zero_signal_fraction: 0.9
    run_dead_flux_check: True
    dead_flux_check: None
    max_dead_norm_signal: 0.05
    maual_flag_file: 'default'
    max_low_qe_norm_signal: 0.5
    max_open_adj_norm_signal: 1.05
    do_not_use: ['DEAD', 'LOW_QE', 'OPEN', 'ADJ_OPEN']
    output_file: none
    author: 'jwst_reffiles'
    description: 'This is a bad pixel mask'
    pedigree: 'GROUND'
    useafter: '2019-04-01 00:00:00'
    history: 'This file was made using mkrefs.py'
    quality_check: False

example_bpm:
    reftype: bpm
    imtypes: DDFF
    ssbsteps: refpix-
    # after a reference file is created, run the following tests:
    # (1) load it into the appropriate data model
    # (2) run it through ssb
    test4datamodel: True
    test4ssb: True
    # add any random paramters
    random_option: hello
    pedigree: 'GROUND'
    useafter: '2019-04-01 00:00:00'
    history: 'This file was made using mkrefs.py'
    quality_check: False

rdnoise_nircam:
    reftype: rdnoise
    imtypes: DD
    ssbsteps: dq_init
    test1: 6

gain_armin:
    reftype: gain
    imtypes: DDFF
    ssbsteps: superbias-
    reffile4ssb:
        bpmreffile: /bla/bpm.fits

gain_bryan:
    reftype: gain
    imtypes: FF
    ssbsteps: rate-
    reffile4ssb:
        bpmreffile: /bla/bpm.fits

